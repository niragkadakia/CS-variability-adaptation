"""
Plot estimation error of inferred signal in compressed sensing 
from error objects (.npz) generated by calculate_errors.py.

Created by Nirag Kadakia at 20:00 08-20-2017
This work is licensed under the 
Creative Commons Attribution-NonCommercial-ShareAlike 4.0 
International License. 
To view a copy of this license, visit 
http://creativecommons.org/licenses/by-nc-sa/4.0/.
"""

import scipy as sp
import sys
sys.path.append('../src')
from utils import get_flag, project_tensor
import matplotlib.pyplot as plt
from load_specs import read_specs_file
from save_data import save_figure
from load_data import load_MSE_errors
from plot_formats import MSE_error_plots_formatting


def plot_MSE_errors(data_flag, axes_to_plot=[0, 1], 
				projected_variable_components=dict()):
	"""
	Plot estimation error of inferred signal in compressed sensing 
	from error objects (.npz) generated by calculate_errors.py.	Requires
	a rank-2 array. 

	Args:
		data_flag: Identifier for saving and loading.
		axes_to_plot: 2-element list indicating which of the iterated 
			variables are to be plotted; first one is the iterated 
			variable; second one will form the x-axis of the plot.
		projected_variable_components: dictionary; keys indicated the name
			of variable to be projected down, value is the component along 
			which it is projected.
	"""
	
	data_flag = get_flag()
	
	list_dict = read_specs_file(data_flag)
	for key in list_dict:
		exec("%s = list_dict[key]" % key)
		
	iter_plot_var = iter_vars.keys()[axes_to_plot[0]]
	x_axis_var = iter_vars.keys()[axes_to_plot[1]]
	
	errors = load_MSE_errors(data_flag)
	errors_nonzero = errors['errors_nonzero']
	errors_zero = errors['errors_zero']
	nAxes = len(errors_zero.shape)
	if nAxes > 2:
		errors_nonzero = project_tensor(errors_nonzero, 
									iter_vars, projected_variable_components, 
									axes_to_plot)
		errors_zero = project_tensor(errors_zero, 
									iter_vars, projected_variable_components, 
									axes_to_plot)
	
	#Switch axes if necessary
	if axes_to_plot[0] > axes_to_plot[1]:    
		errors_nonzero = errors_nonzero.T
		errors_zero = errors_zero.T
	
	#Plot nonzero component errors
	fig = MSE_error_plots_formatting(x_axis_var)
	for idx, val in enumerate(iter_vars[iter_plot_var]):
		plt.plot(iter_vars[x_axis_var], errors_nonzero[idx, :], linewidth = 0.5)
	if nAxes < 3:
		save_figure(fig, 'errors_nonzero_%s' % axes_to_plot, data_flag)
	else:
		tmp_str = ''
		for key, value in projected_variable_components.items():
			tmp_str += '%s=%s' % (key, value)
		save_figure(fig, 'errors_nonzero_%s[%s]' % (axes_to_plot, tmp_str), data_flag)
	
	#Plot zero component errors
	fig = MSE_error_plots_formatting(x_axis_var)
	for idx, val in enumerate(iter_vars[iter_plot_var]):
		plt.plot(iter_vars[x_axis_var], errors_zero[idx, :], linewidth = 0.5)
	if nAxes < 3:
		save_figure(fig, 'errors_zero_%s' % axes_to_plot, data_flag)
	else:
		tmp_str = ''
		for key, value in projected_variable_components.items():
			tmp_str += '%s=%s' % (key, value)
		save_figure(fig, 'errors_zero_%s[%s]' % (axes_to_plot, tmp_str), data_flag)
	
if __name__ == '__main__':
	data_flag = get_flag()
	plot_MSE_errors(data_flag, axes_to_plot=[0, 1], 
				projected_variable_components=dict(mu_eps=0))