"""
Plot estimation error of inferred signal in compressed sensing 
from error objects (.npz) generated by calculate_errors.py, 
averaged over 2nd variables. Allows to plot a batch of 
errors to compare.

Created by Nirag Kadakia at 22:00 09-21-2017
This work is licensed under the 
Creative Commons Attribution-NonCommercial-ShareAlike 4.0 
International License. 
To view a copy of this license, visit 
http://creativecommons.org/licenses/by-nc-sa/4.0/.
"""

import scipy as sp
import sys
sys.path.append('../src')
from utils import get_flag, project_tensor
import matplotlib.pyplot as plt
from load_specs import read_specs_file
from save_data import save_figure
from load_data import load_MSE_errors
from plot_formats import MSE_error_plots_formatting


def plot_average_MSE_errors(data_flags, axes_to_plot=[0, 1], 
				projected_variable_components=dict()):
	"""
	Plot estimation error of inferred signal in compressed sensing 
	from error objects (.npz) generated by calculate_errors.py.	Requires
	a rank-2 array. 

	Args:
		data_flags: Identifiers for saving and loading.
		axes_to_plot: 2-element list indicating which of the iterated 
			variables are to be plotted; first one is the iterated 
			variable; second one will form the x-axis of the plot.
		projected_variable_components: dictionary; keys indicated the name
			of variable to be projected down, value is the component along 
			which it is projected.
	"""
	
	# Convert single element list to list
	if not hasattr(data_flags,'__iter__'):
		data_flags = [data_flags]
	
	fig = None	
		
	# Plot for each command line argument
	for data_flag in data_flags:
	
		data_flag = str(data_flag)
		list_dict = read_specs_file(data_flag)
		for key in list_dict:
			exec("%s = list_dict[key]" % key)
			
		iter_plot_var = iter_vars.keys()[axes_to_plot[0]]
		x_axis_var = iter_vars.keys()[axes_to_plot[1]]
		
		errors = load_MSE_errors(data_flag)
		errors_nonzero = errors['errors_nonzero']
		errors_zero = errors['errors_zero']
		nAxes = len(errors_zero.shape)
		if nAxes > 2:
			errors_nonzero = project_tensor(errors_nonzero, 
									iter_vars, projected_variable_components, 
									axes_to_plot)
			errors_zero = project_tensor(errors_zero, 
									iter_vars, projected_variable_components, 
									axes_to_plot)
		
		# Ready the plotting window if not made yet
		if fig is None:
			fig = MSE_error_plots_formatting(x_axis_var)
			fig.set_size_inches(8, 4)
	
		# Switch axes if necessary
		if axes_to_plot[0] > axes_to_plot[1]:    
			errors_nonzero = errors_nonzero.T
			errors_zero = errors_zero.T
		
		# Average errors
		average_nonzero_errors = sp.average(errors_nonzero, axis=1)
		average_zero_errors = sp.average(errors_zero, axis=1)
		
		# Plot nonzero component errors
		plt.subplot(121)
		plt.xscale('log')
		plt.yscale('log')
		plt.plot(iter_vars[iter_plot_var], sp.average(errors_nonzero, axis = 1), color='blue')
		plt.subplot(122)
		plt.xscale('log')
		plt.yscale('log')
		plt.plot(iter_vars[iter_plot_var], sp.average(errors_zero, axis = 1), color='orange')
		
		if nAxes < 3:
			save_figure(fig, 'average_MSE_errors_%s' % axes_to_plot, data_flag)
		else:
			tmp_str = ''
			for key, value in projected_variable_components.items():
				tmp_str += '%s=%s' % (key, value)
			save_figure(fig, 'average_MSE_errors_%s[%s]' % (axes_to_plot, tmp_str), data_flag)
	
	
if __name__ == '__main__':
	data_flags = sys.argv[1:]
	plot_average_MSE_errors(data_flags, axes_to_plot=[0, 1], 
				projected_variable_components=dict(mu_eps=0))