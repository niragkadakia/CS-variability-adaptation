"""
Plot estimation error of inferred signal in compressed sensing 
from error objects (.npz) generated by calculate_errors.py, 
averaged over 2nd variables. Allows to plot a batch of 
errors to compare.

Created by Nirag Kadakia at 22:00 09-21-2017
This work is licensed under the 
Creative Commons Attribution-NonCommercial-ShareAlike 4.0 
International License. 
To view a copy of this license, visit 
http://creativecommons.org/licenses/by-nc-sa/4.0/.
"""

import scipy as sp
import sys
sys.path.append('../src')
from utils import get_flags, project_tensor
import matplotlib.pyplot as plt
from matplotlib import cm
from load_specs import read_specs_file
from save_data import save_figure
from load_data import load_success_ratios
from plot_formats import binary_error_plots_formatting


def plot_average_success_ratios(data_flags, axes_to_plot=[0, 1], 
				projected_variable_components=dict(),
				colors=None):
	"""
	Plot estimation error of inferred signal in compressed sensing 
	from error objects (.npz) generated by calculate_errors.py.	Requires
	a rank-2 array. All data_flags are plotted in a single window for 
	comparison; this makes the saving weird, since the saved plots only 
	contain plots up to that point.

	Args:
		data_flags: Identifier for saving and loading.
		axes_to_plot: 2-element list indicating which of the iterated 
			variables are to be plotted; first one is the iterated 
			variable; second one will form the x-axis of the plot.
		projected_variable_components: dictionary; keys indicated the name
			of variable to be projected down, value is the component along 
			which it is projected.
		colors: list; RGB values of colors for distinct parameters. 
	"""
	
	# Convert single element list to list
	if not hasattr(data_flags,'__iter__'):
		data_flags = [data_flags]
	
	fig = None
	if colors is None:
		colors = cm.Blues(sp.linspace(0.2, 0.8, len(data_flags)))
	
	assert len(colors) == len(data_flags), "Number of colors does not equal " \
		"number of data_flags: %s != %s" % (len(colors), len(data_flags))
	
	# Plot for each command line argument, cumulatively, into a single plot
	for iD, data_flag in enumerate(data_flags):
	
		data_flag = str(data_flag)
		list_dict = read_specs_file(data_flag)
		for key in list_dict:
			exec("%s = list_dict[key]" % key)
			
		iter_plot_var = iter_vars.keys()[axes_to_plot[0]]
		x_axis_var = iter_vars.keys()[axes_to_plot[1]]
		
		successes = load_success_ratios(data_flag)
		nAxes = len(successes.shape)
		if nAxes > 2:
			successes = project_tensor(successes, 
									iter_vars, projected_variable_components,
									axes_to_plot)
		
		# Ready the plotting window if not done so yet 
		if fig is None:
			fig = binary_error_plots_formatting(x_axis_var)
			fig.set_size_inches(5, 4)
		
		# Switch axes if necessary
		if axes_to_plot[0] > axes_to_plot[1]:    
			successes = successes.T
		
		# Average errors
		average_successes = sp.average(successes, axis=1)
		
		# Plot success ratios
		plt.xscale('log')
		plt.ylim(0, 1)
		plt.plot(iter_vars[iter_plot_var], average_successes, 
					color=colors[iD])
		
		if nAxes < 3:
			save_figure(fig, 'average_successes_%s' % axes_to_plot, 
						data_flag, clear_plot=False)
		else:
			tmp_str = ''
			for key, value in projected_variable_components.items():
				tmp_str += '%s=%s' % (key, value)
			save_figure(fig, 'average_successes_%s[%s]' 
						% (axes_to_plot, tmp_str), data_flag, 
						clear_plot=False)
	
	
if __name__ == '__main__':
	data_flags = get_flags()
	plot_average_success_ratios(data_flags, axes_to_plot=[0, 1], 
				projected_variable_components=dict(normal_eps_tuning_width=5))